#include<bits/stdc++.h>
#define ld long double
#define tset puts("qwq");
#define test puts("QAQ");
#define pb(a) push_back(a)
#define pii pair<int,int> 
#define mkp make_pair
#define bg begin()
#define ed end()
#define lob lower_bound
#define upb upper_bound
#define fi first
#define se second
#define FR(i,a,b) for(int i=(a),i##E=(b);i<i##E;i++)
#define FL(i,a,b) for(int i=(b)-1,i##E=(a-1);i>i##E;i--)
#define R(i,a,b) for(int i=(a),i##E=(b);i<=i##E;i++)
#define L(i,a,b) for(int i=(b),i##E=(a);i>=i##E;i--)
#define sz(a) int((a).size())
#define us unsigned 
#define int long long
#define Swap(x,y) (x^=y^=x^=y)
template<typename T> inline void ckmax(T& x, T y) { x = (y > x ? y : x); }
template<typename T> inline void ckmin(T& x, T y) { x = (y < x ? y : x); }
using namespace std;
//const int inf=0x7f7f7f7f7f7f7f3f;
const int inf=0x7f7f7f7f;
//const int mod=1e9+7;
//const int mod=10007;
int mod;
const ld eps=1e-8;
inline int fpow(int a,int b){int res=1;while(b){if(b&1)res=res*a%mod;a=a*a%mod;b>>=1;}return res;}
/*
const int qwq=2000010;
int F[qwq],inv[qwq],Finv[qwq];
void init_C()
{
    F[0]=Finv[0]=inv[1]=1;
    R(i,2,qwq-10) inv[i]=(mod-mod/i)*inv[mod%i]%mod;
    R(i,1,qwq-10) F[i]=1ll*(F[i-1]*i)%mod,Finv[i]=1ll*(Finv[i-1]*inv[i])%mod;
}

inline int C(int n,int m){ if(m<0||m>n||n<0) return 0;return 1ll*F[n]%mod*1ll*Finv[m]*1ll%mod*1ll*Finv[n-m]%mod;}
*/

//#define getchar()(p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)
//char buf[1<<21],*p1=buf,*p2=buf;
inline int read()
{
    char c=getchar();int x=0;bool f=0;
    for(;!isdigit(c);c=getchar())f^=!(c^45);
    for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+(c^48);
    if(f)x=-x;
	return x;
}
/*
unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
mt19937 rand_num(seed);  
uniform_int_distribution<long long> dist(0, 10000000);  // ¸ø¶¨·¶Î§
printf("%lld ",dist(rand_num));
*/	
const int qwq=1e7+10;
int F[qwq],inv[qwq],Finv[qwq];	
int s,t;
int n,m;
int blo[555]={1,771609011,194654165,757598365,373277378,575993690,679588787,792826398,94554330,804773582,339947657,604525740,80804071,45896189,29471694,644410914,625658032,164453510,446741861,528276743,115388554,21414345,193514121,64404050,117253184,845156383,859042055,839485879,763895495,381429189,927753473,390570038,81902729,868244462,314370344,113597571,492653076,311858715,319470689,870330687,231650198,319198104,573410192,706802110,795549105,275372077,614676940,656062027,706613513,417015280,628747611,978901967,644329557,900590282,955379716,435050233,182189704,874255939,493459577,119407924,861276874,771589701,920557041,862205439,122904174,528488005,605729433,156206058,758403532,678118694,560535754,562683630,929853995,322646800,134813393,575723423,444307051,946515899,964674296,899248122,19718881,887885833,645506520,742515560,166390607,435804308,392662542,333956935,604265850,251636529,589260614,758842581,431598484,269468094,316141604,115875731,798872182,175880791,702689160,568978916,980615670,378064080,460735143,499218351,909342828,498233789,894871804,64318457,668213788,368358465,250056719,471350676,835077291,512595292,970650842,573642792,940444006,705722672,466595978,6426354,605708902,673546624,627101696,40212568,956961781,622311440,708510920,337715265,595374953,367028931,10339713,743006082,649948111,864492098,432771003,406515053,297052270,259820660,504500372,24256070,953137758,982305079,904472187,267322069,972171460,305524341,358137156,430812885,205417732,957228840,567990617,821445389,523278759,812918298,40985265,214586028,621359309,625396584,763918327,303202691,136330694,349609519,780390893,463986633,593962163,428286021,145526589,666710721,237298642,518010590,789141286,548605910,547502729,519376166,494858128,876239482,859827088,184098359,702614569,350773870,239251844,789388201,980585372,364443275,696497304,833028198,968265243,124172549,327618555,217443829,507099195,660086316,951236205,303357455,175311016,183353401,403003246,516227745,307407275,377569413,80895858,859023566,884173940,635539900,661915894,897495689,629333430,935435568,141143316,162164399,794616057,787872737,419544188,989724262,103501528,416530981,55534790,735360852,24104435,253084993,82543181,18179091,974515889,23014967,214386362,162620789,636447745,296389699,166674820,377260828,809149102,720645972,157716413,263177724,657740865,360557758,727985225,261945565,542802547,268013902,945758533,881472510,198333082,655194361,841244268,34939730,332870060,535667154,128912060,673605082,332773615,860329305,369542422,76619706,937552110,901163479,947604326,450585739,841073740,771412753,778293884,976767249,209783319,688915952,31645304,931831772,415587689,778687376,132890573,119242902,816072325,719526778,539673229,295698416,242195951,840463305,364946012,670425143,277327596,186572373,314090707,219457737,676171166,676013773,656982948,359312533,825335952,368460011,950720176,720477920,203468300,704665983,469522199,157066527,668513948,38118251,523597097,984301563,78150064,221708663,847676612,897927130,285083515,284695001,615735623,593633946,60387330,7446918,754766514,80511303,88253201,90658431,924384513,547631433,405409843,409730729,590811109,714583169,524072466,698565390,865646459,479085964,397614596,502882119,879640797,57644880,296992818,665582245,531303976,748019599,44140403,975648444,982748749,31466521,349000130,674747365,307350580,129834256,601265612,652770817,932054479,291353156,906338453,133957175,968513971,647558947,451679143,337899828,304608319,530068217,280899854,144946203,323470763,209439533,711149370,620521853,941649681,664868583,670987070,186764167,487949042,13816404,19407255,299131595,104417650,443931319,32881231,776740096,229358693,266536004,350565860,259401759,902134863,801912845,454045115,195555559,727395120,168417678,233716418,513357052,274421113,432905507,681880603,738839362,865049371,613927208,800793404,979468052,378753960,97988012,850206182,752383450,811566154,1101168,463437080,523068673,947228704,12096108,583158674,494280933,924190099,251806276,334075923,443429791,909074399,959699640,339446040,202126351,243927715,234255364,61197595,349801529,918360458,576866531,968731911,431457537,865391205,572899068,327971809,510456632,30481013,307482235,94191102,528534818,296958926,277889272,14159661,619921072,322121170,71002679,945080481,685997207,846061875,295719755,800869334,775348259,788735813,265473877,247925721,424618621,374054151,942828336,498139350,909622014,626585174,15465841,172783980,759506631,67248670,366910985,637860202,195135528,453772952,690274442,506326572,981825804,985721753,985880927,517650119,68507239,988303904,139824287,140132902,486474316,254315399,60249051,932343082,425697391,823033484,853226030,366305269,586393703,709902840,425382302,240313250,31221400,446008931,221219776,638287402,402524331,141661632,460479726,253304568,532971543,935054940,256041240,903484795,919520222,679628475,116216363,801322068,513404252,954873530,133435535,910227417,135001367,711482225,717518684,816764683,491695937,14092619,678169057,818493976,628246507,610552665,879300535,817173319,211670315,501272080,675906021,425129031,838515993,825119384,915361455,512334790,668000142,145945568,776545884,206337033,56311124,98903382,612568986,761635725,318428217,5642127,541564676,100946027,170771600,652603642,874253390,83506760,301712971,237728171,843054667,889873351,890383404,531540788,434069425,270568395,270176993,990093364,258341403,581820732,215473460,240242636,411396213,730424368,740777932,567920270,529281764,12617443,0};
void init_C()
{
    F[0]=Finv[0]=inv[1]=1;
    R(i,2,qwq-10) inv[i]=(mod-mod/i)*inv[mod%i]%mod;
    R(i,1,qwq-10) F[i]=1ll*(F[i-1]*i)%mod,Finv[i]=1ll*(Finv[i-1]*inv[i])%mod;
}
namespace task1//1 2 6
{
	inline int C(int n,int m){ if(m<0||m>n||n<0) return 0;return 1ll*F[n]%mod*1ll*Finv[m]*1ll%mod*1ll*Finv[n-m]%mod;}
}
namespace task2
{
	inline int C(int n,int m) {
		if(m>n||n<0) return 0;
		return 1ll*F[n]*fpow(F[m],mod-2)%mod*fpow(F[n-m],mod-2)%mod;
	}
	inline int Lucas(int n,int m) {
		if(!m) return 1;
		return 1ll*C(n%mod,m%mod)*Lucas(n/mod,m/mod)%mod;
	}
}
namespace task3//4 5
{
	/*
	inline void init() {
		int B=998244353/550,cnt_B=0,num=1;
		blo[0]=1;
		R(i,1,998244353) {
			num=num*i%mod;
			if(i%B==0) {blo[++cnt_B]=num;}
		}
		blo[++cnt_B]=num;
		printf("cnt:das%lld\n",cnt_B);
		R(i,0,cnt_B) printf("%lld,",blo[i]);
	}
	*/
	inline int get_val(int x) {
		int tmp=x/550,ano=tmp*550,juk=ano,vvv=blo[tmp];
	//	printf("x:%lld,tmp:%lld,ano:%lld,juk:%lld,vvv:%lld\n",x,tmp,ano,juk,vvv);
		R(i,juk+1,x) vvv=vvv*i%mod;
		//printf("%lld\n",vvv);
		return vvv; 
	}
	inline int C(int n,int m) {
		if(m>n||n<0) return 0;
		return 1ll*get_val(n)*fpow(get_val(m),mod-2)%mod*fpow(get_val(n-m),mod-2)%mod;
	}
	inline int Lucas(int n,int m) {
		if(!m) return 1;
		return 1ll*C(n%mod,m%mod)*Lucas(n/mod,m/mod)%mod;
	}
}
signed main() 
{
	
	//freopen("asjkd.txt","w",stdout);
	s=read(),t=read(),mod=read();
	if(s==1||s==2||s==6) 
	{
		init_C();
		for(;t--;) 
		{
			n=read(),m=read();
			printf("%lld\n",task1::C(n,m));
		}
	}
	if(s==3||s==7) {
		init_C();
		for(;t--;) {
			n=read(),m=read();
			printf("%lld\n",task2::Lucas(n,m));
		}
	}
	if(s==4||s==5) 
	{
		for(;t--;) {
			n=read(),m=read();
			printf("%lld\n",task3::Lucas(n,m));
		}
	}
}
/*
4 3 998244353
3 1
5 2
99 33

1 3 998244353
3 1
5 2
99 33

*/